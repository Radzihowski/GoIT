# Зрізи у Python (Slice)
#
# Для впорядкованих контейнерів є спеціальний синтаксис, коли нам необхідно отримати деяку послідовність елементів з
# контейнера.
#
# Зрізи (slices) у Python — це потужний механізм для доступу до частин послідовностей, таких як рядки, списки та кортежі.
#
# Зрізи визначаються за допомогою квадратних дужок [] із вказівкою індексів початку, кінця та (необов'язково) кроку.
# Ось основний синтаксис:
# послідовність[початок:кінець:крок]
#
#  - початок — індекс елемента, з якого починається зріз. Якщо він не вказаний, зріз починається з початку
#  послідовності, з 0.
#  - кінець — індекс елемента, до якого йде зріз, але увага!, не включаючи його. Якщо він не вказаний, зріз іде до кінця
#  послідовності.
#  - крок — визначає крок, з яким вибираються елементи. Якщо не вказаний, використовується крок 1.
#
# Наприклад, якщо ми хочемо отримати перші 5 літер рядка:
s = "Hello, World!"
first_five = s[:5]
print(first_five)  # Виведе 'Hello'

# Змінна first_five у цьому прикладі буде містити рядок 'Hello'.
#
# Візьмемо список чисел від 1 до 10 і збережемо окремо парні, непарні та кратні 3 числа.

# Спочатку отримаємо непарні числа списку.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_numbers = numbers[0:10:2]
print(odd_numbers)

# За замовчуванням Python розпочне зріз із початку і до кінця списку, тому ми могли б скоротити запис зрізу до виразу:
odd_numbers = numbers[::2]  # Виведе [1, 3, 5, 7, 9]

# Це те ж саме, що і запис numbers[0:10:2].
# Тепер отримаємо парні числа зі списку за допомогою зрізів.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_numbers = numbers[1:10:2]

# У even_numbers ми беремо числа, починаючи з індексу 1 до 10 з кроком 2, та отримаємо список [2, 4, 6, 8, 10].
# Тут теж можна скоротити запис зрізу та записати.
even_numbers = numbers[1::2] # Виведе [2, 4, 6, 8, 10]

# І нарешті отримаємо числа списку, кратні трьом.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
three_numbers = numbers[2:10:3]

# У three_numbers ми беремо числа, починаючи з індексу 2 до 10 з кроком 3, та отримуємо список [3, 6, 9].
#  Скорочений запис — three_numbers = numbers[2::3].

# Ми можемо використовувати від'ємні індекси у зрізах. Із корисного, використання від'ємного кроку дозволяє "проходити"
# послідовність у зворотному порядку і фактично заміняє метод reverse для списків.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
reverse_numbers = numbers[::-1]
print(reverse_numbers)

# Змінна reverse_numbers буде зберігати зворотний список [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
#
# Щоб зробити копію списку в Python, можна замість методу copy використати зріз з усіма елементами оригінального списку.
# Зробити це дуже просто — треба створити зріз, який починається з першого елемента і йде до кінця списку. Ось як це
# виглядає на практиці:
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
copy_numbers = numbers[:]
print(copy_numbers)

# У цьому випадку copy_numbers є повною копією numbers. Зріз [:] вказує на вибір усіх елементів зі списку, починаючи
# з першого і закінчуючи останнім. Це створює новий список, який містить усі елементи оригінального списку, але є
# незалежним об'єктом. Якщо ти зміниш copy_numbers, це не вплине на numbers, і навпаки.
#
# Зрізи — це надзвичайно корисний інструмент для роботи з послідовностями в Python, вони дозволяють легко й інтуїтивно
# отримувати підпослідовності або змінювати порядок елементів.