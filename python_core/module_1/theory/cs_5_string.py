# Методи рядків
#
# Рядок — це незмінна впорядкована послідовність символів у деякому кодуванні. За замовчуванням використовується
# кодування UTF-8, але можна працювати майже з усіма відомими таблицями кодування символів.
# У Python рядок теж можна розглядати як колекцію символів. Це означає, що рядки підтримують багато операцій, які
# зазвичай застосовуються до колекцій, таких як списки.
#
# Важливо тільки пам'ятати, що рядки в Python є незмінними (immutable), це значить, що ви не можете змінити окремі
# символи в рядку без створення нового рядка.
#
# Ми вже знаємо: щоб створити змінну типу "рядок", необхідно певний набір символів взяти в лапки. Ми будемо в основному
# використовувати два варіанти:

s = "Hello world!"
s[0] = "Q"# Тут буде викликано виняток (помилка) TypeError

# У Python рядки мають багато корисних "малих" методів, які дозволяють виконувати різноманітні операції обробки тексту.
# Ці методи дуже корисні для обробки та перетворення текстових даних у Python. Вони дозволяють виконувати
# найрізноманітніші задачі, пов'язані з рядками, від простого форматування до більш складної обробки тексту.

# Для того, щоб усі літери рядка перевести у верхній регістр, використовується метод upper:
s = "Hello"
s.upper()
print(s)  # Виведе 'HELLO'

# Для переведення в нижній регістр використовується метод lower():
s = "Some Text"
print(s.lower())  # Виведе 'some text'

# Щоб перевірити, що рядок починається з підрядка, є метод startswith:
s = "Bill Jons"
print(s.startswith("Bi"))  # Виведе True

# Щоб перевірити, що рядок закінчується підрядком, використовується метод endswith:
s = "hello.jpg"
print(s.endswith("jpg"))  # Виведе True

# Цей метод зручно використовувати для перевірки розширення файлів.
#
# Метод capitalize робить перший символ рядка великою літерою, а інші — малими:
s = "hello world".capitalize()  # Результат: "Hello world"

# Метод title перетворює перші літери кожного слова в рядку на великі:
s = "hello world".title()  # Результат: "Hello World"

# Ще можуть стати в пригоді методи isdigit, isalpha, isspace, які перевіряють, чи складається рядок тільки з цифр,
# літер, пробілів тощо відповідно:
"123".isdigit()  # True
"hello".isalpha()  # True
" ".isspace()  # True

# Звісно, ми розглянули не всі методи, але ми ще повернемося в навчанні до роботи з методами рядків.

# Форматування рядків
# До появи f- рядків у Python активно використовували метод format.
#
# Метод format у Python використовується для форматування рядків. Він замінює {} в рядку на аргументи, які передаються методу format. Це надзвичайно корисно для створення динамічних рядків.
#
# Розглянемо декілька прикладів використання методу format:

# Просте форматування рядка
name = 'John'
print('Hello, {}!'.format(name)) # Hello, John!

# Форматування з декількома аргументами
age = 25
print('Hello, {}. You are {} years old.'.format(name, age)) # Hello, John. You are 25 years old.

# Використання іменованих аргументів
print('Hello, {name}. You are {age} years old.'.format(name='Jane', age=30)) # Hello, Jane. You are 30 years old.

# Використання індексів для вказівки порядку аргументів
print('Hello, {1}. You are {0} years old.'.format(age, name)) # Hello, John. You are 25 years old.
