# Спеціальний словник defaultdict є підкласом словника dict у Python, який входить у модуль collections. Цей тип словника
# дозволяє призначити значення за замовчуванням для ключів, які ще не існують у словнику.
#
# У звичайному словнику Python спроба доступу до ключа, якого не існує, викликає виняток KeyError. В defaultdict, якщо
# ключ не існує, він автоматично створюється зі значенням, яке повертає функція, передана під час створення defaultdict.
#
# Під час створення defaultdict, ви повинні передати функцію, яка повертає значення за замовчуванням для нових ключів.
# Це може бути будь-який об'єкт, який може бути викликаний, наприклад, int, list, set або навіть ваша функція.
from collections import defaultdict
# Створення defaultdict з list як фабрикою за замовчуванням
d = defaultdict(list)
# Додавання елементів до списку для кожного ключа
d['a'].append(1)
d['a'].append(2)
d['b'].append(4)

print(d)
# У цьому прикладі, якщо ми звертаємось до ключа, який ще не існує, defaultdict автоматично створює для нього новий
# список і це не призводить до помилок в коді.
#
# Виведення:
# defaultdict(<class 'list'>, {'a': [1, 2], 'b': [4]})
#
# Наступний приклад де defaultdict використовує int як функцію за замовчуванням, що означає, що кожен новий ключ має
# ініційоване значення
d = defaultdict(int)
# Збільшення значення для кожного ключа
d['a'] += 1
d['b'] += 1
d['a'] += 1
print(d)

# Виведення:
# defaultdict(<class 'int'>, {'a': 2, 'b': 1})
# Навіщо це потрібно і коли може знадобиться? Наприклад, у вас є список слів і ви хочете розбити його на декілька списків,
# залежно від першої літери слова.
words = ['apple', 'zoo', 'lion', 'lama', 'bear', 'bet', 'wolf', 'appendix']
grouped_words = {}
for word in words:
    char = word[0]
    if char not in grouped_words:
        grouped_words[char] = []
    grouped_words[char].append(word)

print(grouped_words)

# Таким чином ми можемо отримати всі слова із words, що починаються на якусь літеру. Подібні завдання зустрічаються досить
# часто. Нам тут завжди доводиться перевіряти, чи створили ми для ключа char в словнику grouped_words пустий список:
#
#  if char not in grouped_words:
#         grouped_words[char] = []
#
# Якщо ми не зробимо таку перевірку, то операція grouped_words[char].append(word) буде призводити до помилки, бо за
# замочуванням для ключа char ніякого пустого списку не існує. А ми намагаємось щось туди додати.
#
# Щоб не перевіряти, чи є список на цю літеру в словнику grouped_words, ми можемо скористатися defaultdict із collections
# та задати значенням за замовчуванням порожній список:
from collections import defaultdict

words = ['apple', 'zoo', 'lion', 'lama', 'bear', 'bet', 'wolf', 'appendix']
grouped_words = defaultdict(list)

for word in words:
    char = word[0]
    grouped_words[char].append(word)

print(dict(grouped_words))
# Результат виконання буде ідентичний. defaultdict приймає у якості аргументу функцію, яка буде використовуватися для
# створення значення за замовчуванням. В цьому прикладі ми використали list, але ви можете передати будь-яку функцію,
# яка викликається без аргументів.