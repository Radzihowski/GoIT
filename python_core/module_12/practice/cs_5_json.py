# Серіалізація об'єктів Python за допомогою json
# JSON -- JavaScript Object Notation. Формат зберігання даних у вигляді JavaScript об'єктів у рядковому поданні.
# Як значення в JSON можуть бути використані:
#
# Запис - це невпорядкована безліч пар ключ: значення, укладені у фігурні дужки «{ }». Ключ описується рядком, між ним
# та значенням стоїть символ «:». Пари ключ-значення відокремлюються один від одного комами.
#
# Масив (одномірний) - це впорядкована безліч значень. Масив полягає у квадратних дужках []. Значення поділяються комами.
# Масив може бути порожнім, тобто не містити жодного значення.
#
# Число (ціле або з плавачою крапкою).
#
# Літерали true (логічне значення «істина»), false (логічне значення хибно) та null.
#
# Рядок - це впорядкована безліч з нуля або більше символів юнікод, укладене в подвійні лапки. Символи можуть бути
# вказані з використанням escape-послідовностей, що починаються зі зворотної косої риси "" (підтримуються варіанти
# ', ", \, /, \t, \n, \r, \f і \b), або записані шістнадцятковим кодом у кодуванні Unicode у вигляді \uFFFF.
import json

d = {"a": 1}
d2 = {2: 1}
l = [1, 2.2]
t = (3, 4)
s = "I am string!"

print(json.dumps(d))
print(json.dumps(d2))
print(json.dumps(l))
print(test:=json.dumps(t))
print(json.dumps(s))
print(json.loads(test))

with open('store.json', 'w') as file:
    json.dump(d, file)

with open('store.json', 'r') as file:
    d_copy = json.load(file)

print(d is d_copy)
print(d, d_copy)