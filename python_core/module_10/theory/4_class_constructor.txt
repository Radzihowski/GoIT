Конструктор класу
Підіб'ємо короткий підсумок, об'єкти можуть зберігати дані у звичайних змінних, які належать об'єкту. Змінні, що
належать об'єкту або класу, називають полями. Об'єкти можуть мати функції, що належать класу. Такі функції називають
методами класу. Всі разом (поля та методи) заведено називати атрибутами класу.

За допомогою атрибутів класу ми виконуємо інкапсуляцію — приховуємо деталі реалізації під інтерфейсом класу.

Інкапсуляція - це здатність об'єктів приховувати частину свого стану та поведінки від інших об'єктів, надаючи
зовнішньому світу лише певний інтерфейс взаємодії із собою.
Як бачимо — методи класу мають одну відмінність від звичайних функцій, вони повинні мати додатково ім'я self, яке
додається до початку списку параметрів. Однак, під час виклику методу жодного значення цьому параметру надавати не
потрібно — його додасть сам Python. Ця змінна вказує на сам об'єкт екземпляра класу, і за традицією вона називається self.

Розглянемо наступний код:

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greeting(self):
        return f"Hi {self.name}"


p = Person("Boris", 34)
print(p.name)  # Boris
print(p.age)  # 34
print(p.greeting())  # Hi Boris


Тут метод __init__() — спеціальний метод конструктор, який автоматично виконується під час створення кожного нового
екземпляра на базі класу Person. Ім'я методу починається і закінчується двома символами підкреслення. Причина в тому,
що так ми запобігаємо конфліктам імен стандартних методів Python та методів ваших класів. Насправді метод __init__() є
магічним методом і ми повернемося до нього у наступному модулі.

Коли ми створюємо екземпляр Person, Python викликає метод __init__() із класу Person. Ми передаємо у виклик
Person("Boris", 34) ім'я "Boris" та вік 34 в аргументах. Пам'ятаємо, що значення self буде передано автоматично, явно
передавати його не потрібно.

Зверніть увагу, що метод класу greeting не приймає параметрів, проте має self у визначенні функції.