Method Resolution Order (MRO).
Наслідування — це дуже потужний інструмент. Наслідуватися можна не тільки від одного класу, а можна одразу від кількох.
Таким чином можна отримувати об'єкти, що поєднують у собі властивості багатьох класів. Тут повинно виникнути питання, а
що буде, якщо кілька класів мають атрибути з однаковим ім'ям?

Для відповіді на це питання потрібно зрозуміти, як Python шукає атрибути (поля або методи) в об'єктах. Власне, це є MRO
(Method Resolution Order). MRO у Python працює наступним чином:
    1) Шукає атрибут серед атрибутів самого класу. Саме завдяки цьому ви можете "перевизначати" батьківські атрибути.
    2) Шукає атрибут у першого з батьків (той, що вказаний першим у списку батьків).
    3) Шукає атрибут у наступного батька у списку батьків, доки такі є.
    4) Шукає атрибут у батьках першого батька.
    5) Повторює п.4 для всіх батьків.
    6) Викликає виняток, що атрибут не знайдено.

Пошуки закінчуються, як тільки атрибут знайдено.

class A:
    x = 'I am A class'

class B:
    x = 'I am B class'
    y = 'I exist only in B'

class C(A, B):
    z = "This exists only in C"

c = C()
print(c.z)  # This exists only in C
print(c.y)  # I exist only in B
print(c.x)  # I am A class


З цього прикладу видно, що у класі C поле x береться з A класу. Якщо ж в цьому самому прикладі змінити список батьків,
то отримаємо:

class A:
    x = 'I am A class'

class B:
    x = 'I am B class'
    y = 'I exist only in B'

class C(B, A):
    z = "This exists only in C"

c = C()
print(c.z)  # This exists only in C
print(c.y)  # I exist only in B
print(c.x)  # I am B class


Тепер у класі C поле x береться з B класу.