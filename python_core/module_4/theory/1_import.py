# Робота з модулями та створення віртуального оточення
# Імпорт пакетів та модулів
#
# Короткі та прості скрипти поміщаються в одному не дуже великому файлі та зазвичай мають розмір до 400 рядків. Такі
# скрипти не складно підтримувати і розвивати. Але рано чи пізно настає момент, коли коду в файлі стає надто багато.
# Розмір одного файлу робить навігацію файлом складною і пошук у файлі потрібного місця коду займає надто купу часу.
# У такій ситуації зручно буде розбити великий скрипт на складові частини і структурувати наш код. Це зробить роботу
# з проєктом простішою і зручнішою.
#
# Хороша структура проєкту значно спрощує підтримку і розробку. Погана ж — навпаки істотно уповільнює роботу. І що
# більший проєкт, тим це помітніше. Не лінуйтеся приділяти час на продумування структури вашого проєкту при кожній
# значній зміні. Ваші зусилля не пройдуть даремно і обов'язково окупляться в майбутньому.
#
# У Python модуль - це файл, який містить всілякі визначення такі, як функції, класи, змінні тощо. Модуль може
# містити будь-який корисний код, і його основна мета - допомогти у структуризації та організації коду.
#
# У Python є великий набір вбудованих пакетів та модулів з готовими корисними функціями та інструментами. Якщо вам
# потрібно зробити щось, чого немає в стандартному невеликому наборі функцій, ви можете імпортувати пакет, де є
# необхідна функція, щоб скористатися нею. Імпортування у Python відбувається за допомогою ключового слова import,
# після якого ви можете вказати один або декілька пакетів, які ви хочете імпортувати.
#
import math

sin_pi = math.sin(math.pi)

# У цьому прикладі ми імпортували пакет математичних функцій і констант math та зберегли значення синуса $π$ у
# змінній sin_pi. Різницю між пакетом там модулем ми пояснимо трохи пізніше, поки думайте про модуль як файл, а
# пакет набір файлів - директорію з файлами.
#
# Для того щоб викликати функцію з імпортованого пакету, потрібно вказати ім'я пакету і через крапку ім'я функції або
# константи в цьому пакеті. Цей синтаксис дуже схожий на виклик метода, ми робили так зі словниками та списками раніше.
#
# Є й інший спосіб: можна імпортувати з пакета тільки те, що нам необхідно за допомогою виразу from ... import ...:
from math import pi, sin

sin_pi = sin(pi)

# Цей код робить те саме, що і код вище. Використовуйте той синтаксис, який вам здається зручнішим.
#
# ☝ Можна імпортувати весь вміст модуля за допомогою інструкції from <module_name> import *. Це може здатися зручним,
# але не рекомендується через можливі конфлікти імен і ускладнення читабельності коду в майбутньому.
# Імпортувати код можна не лише із стандартних або встановлених пакетів (модулів), але й з власноручно написаних
# модулів Python
# Що таке модуль у Python?
#
# Модулем Python є будь-який текстовий файл з розширенням py, який містить код мовою Python. Це означає, що коли ви
# створюєте скрипт mymodule.py, який містить ось такий код:
#
# check code in mymodule.py
#
# В цьому файлі ми визначили функцію say_hello, яка приймає один аргумент name і повертає привітання. Кожен модуль має
# свій простір імен, що відокремлює його визначення від інших модулів. Наприклад, якщо в іншому модулі існує функція з
# такою ж назвою, це не призведе до конфлікту.
#
# Для використання цього модуля в іншому файлі Python, наприклад в main.py, ми імпортуємо його:
#
# check code in main.py
#
# Тут mymodule.say_hello("World") викликає функцію say_hello з модуля mymodule в середині скрипту main.py.
#
# Ви також можете імпортувати функцію say_hello з mymodule.py за допомоги виразу from mymodule import say_hello у
# будь-якому скрипті, в тій самій директорії, що і mymodule.py.
#
# Ми також можемо змінити назву функції say_hello в середині main.py, коли імпортуємо її з модуля mymodule.py
#
# check code in main.py
#
# У цьому прикладі, функція say_hello імпортується з модуля mymodule.py, але замість того, щоб використовувати її
# безпосередньо як say_hello , ми надаємо їй псевдонім greeting. Тепер у нашому коді ми можемо використовувати greeting
# для виводу сповіщення.#
#
# Така конструкція використовується для імпортування конкретного елемента, а це може бути функція, клас, змінна тощо з
# модуля, і одночасно присвоєння цьому елементу псевдоніму (alias) у нашому коді
from module_name import item_name as alias

# Це корисно з декількох причин:
# 1) Головна причина, це уникнення конфліктів імен. Якщо у вашому коді вже існує елемент з таким самим іменем, як і
# імпортований, ви можете використовувати псевдонім, щоб уникнути конфлікту імен.
# 2) Спрощення вашого коду. Іноді імена класів або функцій у модулях можуть бути довгими або не зовсім зрозумілими.
# 3) Використання псевдоніму може зробити ваш код чистішим і легшим для розуміння.
# Інколи ви захочете замінити модуль на інший з аналогічним функціоналом. Тоді достатньо буде змінити тільки рядок
# імпорту, зберігаючи той самий псевдонім в вашому коді.
#
# Як взагалі Python шукає модулі?
# Коли ви використовуєте оператор import для завантаження модуля, Python шукає відповідний файл .py за допомогою
# визначеного порядку пошуку.

# Перш за все, Python шукає модуль у директорії, з якої запускається виконавчий скрипт (або поточній робочій директорії,
# якщо інтерпретатор запущений інтерактивно).
#
# Далі пошук відбувається в змінній оточення PYTHONPATH. Це змінна оточення, яка містить список директорій, що Python
# переглядає під час пошуку модулів. Це схоже на змінну PATH в операційних системах, що визначає шляхи до виконавчих
# файлів. PYTHONPATH дає можливість додавати додаткові директорії, де Python може шукати модулі, які не знаходяться у
# стандартному місці.
#
# ☝ Змінні оточення під час запуску програми використовуються для забезпечення конфіденційності даних, налаштування
# конфігурації та адаптації поведінки програми до різних середовищ. Ці змінні є частиною оточення, в якому виконується
# програма, і можуть бути встановлені або змінені на рівні операційної системи, командного рядка або безпосередньо у
# коді програми.
#
# Якщо модуль не було знайдено, то Python, в кінці, перевіряє директорії, які були визначені під час його інсталяції.
# Ці директорії зазвичай включають місця, де знаходяться стандартні бібліотеки Python.
#
# Цей процес дозволяє Python ефективно знаходити та завантажувати модулі з різних місць.
#
# Отже окремі файли з розширенням .py — це модулі. Ви можете імпортувати з них потрібні вам сутності (об'єкти,
# константи тощо) і використати в інших модулях. Зверніть увагу, що під час імпорту не потрібно вказувати розширення
# файлу .py, тільки ім'я.

# Функція dir()
# Функція dir() в Python використовується для отримання переліку атрибутів (включно з методами) об'єкта чи модуля.
# Це корисно для розуміння того, що доступно в модулі після його імпортування:
# dir(module_name): Повертає список атрибутів, визначених у модулі module_name.
# Без аргументів, dir() повертає список атрибутів з поточної області визначень.
#
# Вбудована функція dir() повертає список визначених імен у просторі імен. Без аргументів вона виробляє алфавітно
# відсортований список імен у поточній локальній таблиці символів: