# Третє завдання (не обов'язкове)
# У вашій компанії ведеться активна маркетингова кампанія за допомогою SMS-розсилок. Для цього ви збираєте телефонні
# номери клієнтів із бази даних, але часто стикаєтеся з тим, що номери записані у різних форматах. Наприклад:
# "    +38(050)123-32-34"
# "     0503451234"
# "(050)8889900"
# "38050-111-22-22"
# "38050 111 22 11   "

# Ваш сервіс розсилок може ефективно відправляти повідомлення лише тоді, коли номери телефонів представлені у коректному
# форматі. Тому вам необхідна функція, яка автоматично нормалізує номери телефонів до потрібного формату, видаляючи всі
# зайві символи та додаючи міжнародний код країни, якщо потрібно.
#
# Розробіть функцію normalize_phone(phone_number), що нормалізує телефонні номери до стандартного формату, залишаючи
# тільки цифри та символ '+' на початку. Функція приймає один аргумент - рядок з телефонним номером у будь-якому форматі
# та перетворює його на стандартний формат, залишаючи тільки цифри та символ '+'. Якщо номер не містить міжнародного коду,
# функція автоматично додає код '+38' (для України). Це гарантує, що всі номери будуть придатними для відправлення SMS.

# Вимоги до завдання:
# Параметр функції phone_number - це рядок з телефонним номером у різноманітних форматах.
# Функція видаляє всі символи, крім цифр та символу '+'.
# Якщо міжнародний код відсутній, функція додає код '+38'. Це враховує випадки, коли номер починається з '380'
# (додається лише '+') та коли номер починається без коду (додається '+38').
# Функція повертає нормалізований телефонний номер у вигляді рядка.

# Рекомендації для виконання:
#
# Використовуйте модуль re для регулярних виразів для видалення непотрібних символів.
# Перевірте, чи номер починається з '+', і виправте префікс згідно з вказівками.
# Видаліть всі символи, крім цифр та '+', з номера телефону.
# На забувайте повертати нормалізований номер телефону з функції.
#
# Критерії оцінювання:
#
# Коректність роботи функції: функція має правильно обробляти різні формати номерів, враховуючи наявність або відсутність міжнародного коду.
# Читабельність коду: код має бути чистим, добре організованим і добре документованим.
# Правильне використання регулярних виразів для видалення зайвих символів та форматування номера.
#
#
# Приклад використання:
#
# raw_numbers = [
#     "067\\t123 4567",
#     "(095) 234-5678\\n",
#     "+380 44 123 4567",
#     "380501234567",
#     "    +38(050)123-32-34",
#     "     0503451234",
#     "(050)8889900",
#     "38050-111-22-22",
#     "38050 111 22 11   ",
# ]
#
# sanitized_numbers = [normalize_phone(num) for num in raw_numbers]
# print("Нормалізовані номери телефонів для SMS-розсилки:", sanitized_numbers)
#
# У результаті ви повинні отримати список номерів у стандартному форматі, готових до використання у SMS-розсилці.

# Нормалізовані номери телефонів для SMS-розсилки: ['+380671234567', '+380952345678', '+380441234567', '+380501234567',
# '+380501233234', '+380503451234', '+380508889900', '+380501112222', '+380501112211']
#
# Четверте завдання
#
# У межах вашої організації, ви відповідаєте за організацію привітань колег з днем народження. Щоб оптимізувати цей
# процес, вам потрібно створити функцію get_upcoming_birthdays, яка допоможе вам визначати, кого з колег потрібно привітати.
#
# У вашому розпорядженні є список users, кожен елемент якого містить інформацію про ім'я користувача та його день
# народження. Оскільки дні народження колег можуть припадати на вихідні, ваша функція також повинна враховувати це та
# переносити дату привітання на наступний робочий день, якщо необхідно.
#
# Вимоги до завдання:
#
# Параметр функції users - це список словників, де кожен словник містить ключі name (ім'я користувача, рядок) та
# birthday (день народження, рядок у форматі 'рік.місяць.дата').
# Функція має визначати, чиї дні народження випадають вперед на 7 днів включаючи поточний день. Якщо день народження
# припадає на вихідний, дата привітання переноситься на наступний понеділок.
# Функція повертає список словників, де кожен словник містить інформацію про користувача (ключ name) та дату привітання
# (ключ congratulation_date, дані якого у форматі рядка 'рік.місяць.дата').
#
# Рекомендації для виконання:
#
# Припускаємо, що ви отримали список users, де кожен словник містить name (ім'я користувача) та birthday (дата народження
# у форматі рядка 'рік.місяць.дата'). Ви повинні перетворити дати народження з рядків у об'єкти datetime. Конвертуйте
# дату народження із рядка у datetime об'єкт - datetime.strptime(user["birthday"], "%Y.%m.%d").date(). Оскільки потрібна
# лише дата (без часу), використовуйте .date() для отримання тільки дати.
# Визначте поточну дату системи за допомогою datetime.today().date().
# Пройдіться по списку users та аналізуйте дати народження кожного користувача (for user in users:).
# Перевірте, чи вже минув день народження в цьому році (if birthday_this_year < today). Якщо так, розгляньте дату на
# наступний рік.
# Визначте різницю між днем народження та поточним днем для визначення днів народження на наступний тиждень.
# Перевірте, чи день народження припадає на вихідний. Якщо так, перенесіть дату привітання на наступний понеділок.
# Створіть структуру даних, яка зберігатиме ім'я користувача та відповідну дату привітання, якщо день народження
# відбувається протягом наступного тижня.
# Виведіть зібрані дані у вигляді списку словників з іменами користувачів та датами привітань.
#
# Критерії оцінювання:
# 1. Актуальність та коректність визначення днів народження на 7 днів вперед.
# 2. Правильність обробки випадків, коли дні народження припадають на вихідні.
# 3. Читабельність та структурованість коду.
#
# Приклад:
# Припустимо, у вас є список users:
#
# users = [
#     {"name": "John Doe", "birthday": "1985.01.23"},
#     {"name": "Jane Smith", "birthday": "1990.01.27"}
# ]
#
# Використання функції get_upcoming_birthdays:
#
# upcoming_birthdays = get_upcoming_birthdays(users)
# print("Список привітань на цьому тижні:", upcoming_birthdays)
#
# Якщо сьогодні 2024.01.22 результатом може бути:

# [
#     {'name': 'John Doe', 'congratulation_date': '2024.01.23'},
#     {'name': 'Jane Smith', 'congratulation_date': '2024.01.29'}
# ]
#
# Цей список містить інформацію про те, кого і коли потрібно привітати з днем народження на поточному тижні.
