Каррування
Каррування — це перетворення функції від багатьох аргументів у набір функцій, кожна з яких є функцією від одного
аргументу. Ми можемо передати частину аргументів у функцію і отримати назад функцію, що очікує інші аргументи.

Наприклад, для застосунку калькулятора ми можемо створити функцію, яка буде приймати операнди та оператор:

def handle_operation(x, y, operator):
    if operator == '-':
        return x - y
    elif operator == '+':
        return x + y


handle_operation(2, 3, '+')  # 5
handle_operation(2, 3, '-')  # -1


Це рішення страждає тим, що додавання нових і нових математичних операторів постійно ускладнюватиме конструкцію if ...
elif ....

Щоб уникнути цього, ми можемо скористатися карруванням:

def sum_func(x, y):
    return x + y


def sub_func(x, y):
    return x - y


OPERATIONS = {
    '-': sub_func,
    '+': sum_func
}


def get_handler(operator):
    return OPERATIONS[operator]


handler = get_handler('-')
handler(2, 3)           # -1

get_handler('+')(2, 3)  # 5


За такого підходу get_handler повертатиме нам потрібну функцію двох аргументів зі словника з функціями OPERATIONS.
Це швидший і елегантніший спосіб уникнути величезних if ... elif ... конструкцій. Крім того, так ви можете зменшувати
кількість аргументів, які передаєте у функцію до прийнятної кількості (не більше двох), створюючи "на льоту" нові
функції, які вже "знають" про передані аргументи. Як ми робили з two_adder та three_adder вище.