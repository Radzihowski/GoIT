# Можливості деяких вбудованих модулів Python
# Модуль collections
#
# У Python є пакет з додатковими колекціями, які можуть дуже знадобитися розробнику-початківцю і значно розширити його
# арсенал. Модуль collections в Python - це вбудований модуль, який містить спеціалізовані типи даних, які надають
# альтернативи стандартним вбудованим контейнерам. Ці спеціалізовані типи даних призначені для вирішення конкретних задач програмування.
#
# Іменовані кортежі

# Використання кортежів у Python для передачі даних між функціями обробниками — це хороша та поширена практика. Але є
# одна незручність у кортежів - нам необхідно пам'ятати індексацію елементів у кортежі і не плутати їх порядок. Це не
# завжди зручно і для ситуацій, коли в кортежі є досить багато елементів, такий підхід ускладнює читабельність коду.
#
# Тому були придумані іменовані кортежі namedtuple в Python. Це розширення стандартного типу даних tuple, яке дозволяє
# виконувати доступ до елементів списку за іменем, а не за індексом. Що робить наш код легшим для читання та більш зрозумілим.
#
# Іменований кортеж створюється за допомогою функції namedtuple з модуля collections.

from collections import namedtuple
Point = namedtuple('Point', ['x', 'y']) # Створення іменованого кортежу

# У цьому прикладі Point іменований кортеж, який має поля-імена x та y. Тепер ми можемо звертатися до елементу такого кортежу за іменем:
# Створення екземпляра Point
p = Point(11, y=22)
# Доступ до елементів
print(p.x)
print(p.y)

# Уявимо наступний кортеж, який зберігає ім'я, прізвище, вік, місто народження та поштовий індекс: