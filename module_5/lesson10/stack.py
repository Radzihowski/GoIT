# Стек
#
# Стек - це одна з фундаментальних структур даних у програмуванні, яка дозволяє здійснювати операції вставки і вилучення
# даних за принципом "Останнім прийшов - першим вийшов" (LIFO - Last In, First Out).
#
# У структурованому лінійному списку, організованому за принципом LIFO, елементи можуть додаватися та вибиратися тільки
# з одного кінця, що називається «вершиною списку». Структура LIFO може бути проілюстрована наступним малюнком.
# Існують основні операції стеку:

# - Push - додавання елемента.
# - Pop - вилучення елемента.
# - Peek - перегляд верхнього елемента.
# - Is Empty - перевірка стеку на порожнечу.
#
# Проста реалізація цих команд стеку включає наступні функції:

# Створення стеку
def creat_stack():
    return []

# Перевірка на порожнечу
def is_empty(stack):
    return len(stack) == 0

# Додавання елементу
def push(stack, item):
    stack.append(item)

# Вилучення елементу
def pop(stack):
    if not is_empty(stack):
        return stack.pop()
    else:
        print("Стек порожній")

# Перегляд верхнього елемента
def peek(stack):
    if not is_empty(stack):
        return stack[-1]
    else:
        print("Стек порожній")

# Спочатку створимо стек та додамо декілька елементів:
stack = creat_stack()
push(stack, 'a')
push(stack, 'b')
push(stack, 'c')

# Тепер стек містить елементи ['a', 'b', 'c'], де 'c' є на вершині стеку.
# Переглянемо верхній елемент:
print(peek(stack))
print(pop(stack))
print(peek(stack))

# Тепер стек містить ['a', 'b']. Якщо ми спробуємо знову переглянути або видалити верхній елемент, ми отримаємо 'b'.
# Якщо ми продовжимо видаляти елементи, поки стек не стане порожнім, а потім спробуємо ще раз видалити або переглянути
# верхній елемент, обидві функції pop() та peek() виведуть повідомлення "Стек порожній".
# Стеки в програмуванні є ідеальними для задач, де потрібно відслідковувати елементи в зворотному порядку. Наприклад,
# стеки застосовуються в управлінні викликами функцій та в різноманітних алгоритмах.