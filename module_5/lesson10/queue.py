# Черга
#
#
#
# Черга (queue) у програмуванні — це абстрактна структура даних, яка діє за принципом "перший прийшов – перший вийшов"
# (FIFO: First In, First Out). Елементи додаються (enqueue) на один кінець структури та видаляються (dequeue) з іншого кінця.
#
# Існують основні операції для черги:
# Enqueue - додавання елемента в кінець черги.
# Dequeue - видалення елемента з початку черги.
# Front/Peek - перегляд першого елемента черги без його видалення.
# Is Empty - перевірка, чи черга порожня.
# Size - визначення кількості елементів у черзі.
#
# Черги широко використовуються в програмуванні для управління потоками даних та завдань, особливо коли порядок елементів
# має значення.

# В Python, чергу можна реалізувати за допомогою вбудованого типу list, хоча це не завжди найефективніший спосіб через
# високу вартість операцій Dequeue. Списки у Python реалізовані таким чином, що вибір елемента за індексом відбувається
# за константний час (дуже швидко) і додавання/видалення елементу з кінця списку теж відбувається дуже швидко. Але ось
# додавання елементу в будь-яке інше місце в списку змушує Python перерахувати індекси усіх елементів списку до кінця.
# Для великих списків це може бути дуже невигідно. Ефективнішим варіантом є використання deque з модуля collections в якості черги.
from collections import deque

# Створення черги
queue = deque()

# Enqueue: Додавання елементів
queue.append('a')
queue.append('b')
queue.append('c')

print("Черга після додавання елементів:", list(queue))

# Dequeue: Видалення елемента
print("Видалений елемент:", queue.popleft())

print("Черга після видалення елемента:", list(queue))

# Peek: Перегляд першого елемента
print("Перший елемент у черзі:", queue[0])

# IsEmpty: Перевірка на порожнечу
print("Чи черга порожня:", len(queue) == 0)

# Size: Розмір черги
print("Розмір черги:", len(queue))
# Виведення:
#
# Черга після додавання елементів: ['a', 'b', 'c']
# Видалений елемент: a
# Черга після видалення елемента: ['b', 'c']
# Перший елемент у черзі: b
# Чи черга порожня: False
# Розмір черги: 2
#
# У цьому прикладі ми використовуємо deque для створення черги, що дозволяє нам ефективно додавати елементи в кінець
# черги (Enqueue) і видаляти елементи з початку (Dequeue). Операція popleft() використовується для Dequeue, оскільки
# вона видаляє перший елемент з deque, відповідаючи поведінці FIFO черги.
#
# Черги, застосовують для задач, де елементи повинні бути оброблені в порядку їх надходження. Вони широко застосовуються
# для управління задачами в операційних системах, у системах черги повідомлень для мікросервісів, а також у графічних
# інтерфейсах для управління подіями.