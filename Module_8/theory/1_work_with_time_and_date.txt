Робота з датою і часом (datetime)
Робота з датою і часом у Python реалізована у пакеті datetime. Основні можливості datetime:



визначення поточної дати і часу;
обчислення інтервалу між двома подіями;
визначення дня тижня, високосного року для будь-якої дати у минулому не раніше року datetime.MINYEAR або в майбутньому
не пізніше року datetime.MAXYEAR;
порівняння дати і часу декількох подій за допомогою операторів порівняння;
робота з часовими зонами, порівняння подій з урахуванням часових зон та переходу на літній/зимовий час;
перетворення дати/часу в рядок і навпаки.
Щоб отримати поточну дату і час без урахування часового пояса, можна викликати метод now() у datetime:



from datetime import datetime

current_datetime = datetime.now()
print(current_datetime) # 2020-10-09 22:13:35.053819


У результаті виклику now() ми отримуємо об'єкт datetime, у якого є ряд корисних атрибутів:



from datetime import datetime

current_datetime = datetime.now()

print(current_datetime.year)        # 2020
print(current_datetime.month)       # 10
print(current_datetime.day)         # 09
print(current_datetime.hour)        # 22
print(current_datetime.minute)      # 32
print(current_datetime.second)      # 22
print(current_datetime.microsecond) # 819366


В об'єкта datetime є методи, щоб отримати дату (без часу) та час (без дати):



from datetime import datetime

current_datetime = datetime.now()
print(current_datetime.date())  # 2020-10-09
print(current_datetime.time())  # 22:13:35.053819


Щоб створити об'єкт datetime з будь-якою вибраною датою, можна зробити так:



from datetime import datetime

d1 = datetime(year=2012, month=1, day=7, hour=14)
print(d1) # 2012-01-07 14:00:00


Щоб дізнатися день тижня, можна скористатися методом weekday:



from datetime import datetime

seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)
print(seventh_day_2020.weekday())   # 1


Дні тижня у Python починаються з понеділка і він буде 0. У прикладі вище 7 Січня 2020 року було вівторком.



Щоб порівняти два об'єкти datetime, достатньо скористатися оператором порівняння:



from datetime import datetime

current_datetime = datetime.now()

future_month = (current_datetime.month % 12) + 1
future_year = current_datetime.year + int(current_datetime.month / 12)
future_datetime = datetime(future_year, future_month, 1)

print(current_datetime < future_datetime)    # True
Якщо відняти від одного datetime об'єкту інший, то отримаємо timedelta об'єкт. Він відповідає за відрізок часу між двома датами.



from datetime import datetime

seventh_day_2019 = datetime(year=2019, month=1, day=7, hour=14)
seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)

difference = seventh_day_2020 - seventh_day_2019
print(difference)                   # 365 days, 0:00:00
print(difference.total_seconds())   # 31536000.0


Об'єкти timedelta можна створювати самостійно, щоб отримати дату/час віддалену від початкової:



from datetime import datetime, timedelta

seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)
four_weeks_interval = timedelta(weeks=4)

print(seventh_day_2020 + four_weeks_interval)   # 2020-02-04 14:00:00
print(seventh_day_2020 - four_weeks_interval)   # 2019-12-10 14:00:00


Об'єкт timedelta можна створити, задаючи тижні, дні, години, хвилини, секунди, мілісекунди і мікросекунди:



from datetime import timedelta
delta = timedelta(
    days=50,
    seconds=27,
    microseconds=10,
    milliseconds=29000,
    minutes=5,
    hours=8,
    weeks=2
)


Якщо якийсь параметр не заданий, то він дорівнює 0 за замовчуванням.

Робота з часовими поясами припускає знання класів у Python і ми розглянемо її пізніше.

Окремо потрібно сказати про timestamp. timestamp — це кількість секунд, що пройшло з 00 годин 00 хвилин 1 Січня 1970
року в UTC (часовий пояс Гринвіча). Це просто прийнята константа і нічого особливого вона не означає. Просто для
зручності колись почали відраховувати час в секундах з цієї миті і це виявилося дуже зручно. Адже порівняти два числа
завжди легше і швидше, ніж порівняти складну структуру дат і часів.



Звичайно можна з timestamp отримати дату/час і навпаки:



from datetime import datetime

seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)
ts = seventh_day_2020.timestamp()
print(ts)   # 1578398400.0

ts += 100_000
print(datetime.fromtimestamp(ts))   # 2020-01-08 17:46:40
Коли потрібно перетворити дату/час в рядок, ви можете скористатися функцією str, яка перетворить datetime у рядок.
Але часто формат такого перетворення незручний і в Python є окрема мінімова для опису, як перетворити дату/час в рядок:



from datetime import datetime

seventh_day_2020 = datetime(year=2020, month=1, day=7, hour=14)
print(seventh_day_2020.strftime('%A %d %B %Y')) # Tuesday 07 January 2020


Та ж міні-мова використовується для конвертації вже рядків в дату/час:



from datetime import datetime

s = '10 January 2020'
print(datetime.strptime(s, '%d %B %Y')) # 2020-01-10 00:00:00


Деталі можна вивчити на сторінці офіційної документації.