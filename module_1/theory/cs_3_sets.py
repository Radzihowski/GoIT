# Множини
empty_set = set()
a = set("hellooo")
print(a)
b = {1, 2, 3, 4, 5}

lst = [1, 2, 3, 1, 2, 2, 3, 4, 1]
d_lst = set(lst)
lst = list(d_lst)
print(lst)

# add(elem) — додає елемент у множину
numbers = {1, 2, 3}
numbers.add(4)
print(numbers)  # {1, 2, 3, 4}

# remove(elem) — видаляє елемент із множини, викликає виняток, якщо такого елемента немає
numbers = {1, 2, 3}
numbers.remove(3)
print(numbers)  # {1, 2}

# discard(elem) — видаляє елемент із множини і не викликає виняток, якщо його немає
numbers = {1, 2, 3}
numbers.discard(2)
print(numbers)  # {1, 3}

# Математичні операції над множинами
# Розглянемо детальніше, які корисні математичні операції можна робити над множинами. Спершу створимо дві множини a і b:
a = {1, 2, 3}
b = {3, 4, 5}
# Перетин двох множин включає лише ті елементи, які є в обох множинах. Щоб знайти загальні елементи для двох множин, над
# ними треба виконати операцію & або використати метод intersection:
print(a.intersection(b))
print(a & b)

# Різниця між двома множинами включає елементи, які містяться в першій множині, але не містяться в другій. Можна також
# використовувати оператор - або метод difference:
print(a.difference(b))
print(a - b)

# Симетрична різниця між двома множинами включає всі елементи, які містяться в одній множині, але не містяться в іншій,
# і навпаки. Щоб знайти всі елементи з двох множин, окрім загальних, нам необхідно використати оператор ^.
# Альтернативно, можна використовувати метод symmetric_difference:
print(a.symmetric_difference(b))
print(a ^ b)

# Об'єднання двох множин включає всі елементи з обох множин, але без дублікатів. Це знаходиться за допомогою
# оператора | або методу union:
print(a.union(b))
print(a | b)

# Множини — це дуже потужний інструмент, коли необхідно знайти унікальні елементи в якомусь наборі і прибрати дублікати,
# а також найшвидший спосіб знайти загальні або відмінні елементи з декількох наборів.
# Заморожені множини в Python, відомі як frozenset, є подібними до звичайних множин set, але з ключовою відмінністю:
# вони є незмінними. Це означає, що після створення замороженої множини ви не можете додати або видалити елементи з неї.
# Заморожену множину можна створити за допомогою функції frozenset():

my_frozenset = frozenset([1, 2, 3, 4, 5])

# У цьому прикладі ми створили заморожену множину з п'яти чисел.
# Неможливо змінити елементи замороженої множини після її створення. Ви не зможете використовувати методи add() або
# remove(), як у випадку зі звичайними множинами. Заморожені множини можуть використовуватися в якості ключів у
# словниках або як елементи інших множин, тому що вони є хешованими (і, отже, незмінними).
# Хоча ви не можете змінювати заморожені множини, над ними все ще можна виконувати різні операції, які не змінюють саму
# множину, такі як об'єднання, перетин і різниця:

a = frozenset([1, 2, 3])
b = frozenset([3, 4, 5])

union = a | b  # Об'єднання множин
intersection = a & b  # Перетин множин
difference = a - b  # Різниця множин
symmetric_difference = a ^ b  # Симетрична різниця

print(union)  # frozenset({1, 2, 3, 4, 5})
print(intersection)  # frozenset({3})
print(difference)  # frozenset({1, 2})
print(symmetric_difference)  # frozenset({1, 2, 4, 5})

# У цих прикладах результатом кожної операції буде нова заморожена множина.

# Заморожені множини корисні у випадках, коли тобі потрібно мати набір унікальних елементів, який не змінюватиметься,
# та коли потрібна можливість використовувати множини як ключі у словниках або як елементи інших множин.
