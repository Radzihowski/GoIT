# Створення встановлюваних пакетів, структура setup.py
# Кінцевим результатом роботи програміста є застосунок. Щоб користувач міг встановити і використати ваш застосунок, ви
# можете зробити встановлюваний пакет з вашого застосунку.
#
#
#
# Щоб створити пакет, вам потрібно дотримуватися ряду вимог.
#
# Припустимо у вас є пакет useful. У цьому пакеті є модулі some_code.py та another_code.py. У цих модулях знаходиться
# код, який виконує корисну роботу.
#
#
#
# Щоб ваш пакет можна було встановити, вам варто розмістити сам пакет всередині папки, яка називається так само:
#
#
#
# useful/
#     useful/
#         __init__.py
#         some_code.py
#         another_code.py
#     setup.py
#
#
# Поряд з самим пакетом варто розмістити модуль з інструкціями зі встановлення — setup.py. До вмісту setup.py ми
# повернемося трохи пізніше, а поки що продовжимо розгляд структури пакету.
#
#
#
# Python за замовчуванням проігнорує під час встановлення усі файли, які не закінчуються на .py Якщо у вашому пакеті не
# буде __init__.py, то вміст useful/useful/ теж буде проігноровано (сподіваюся це виправлять в наступних версіях). Назва
# пакету повинна відповідати вимогам до імен змінних Python.
#
# Модуль, що містить інструкції зі встановлення, викликає функцію setup з пакету setuptools. Функція setup здійснює
# встановлення пакету в системі і містить параметри, що конфігурують встановлення.
#
#
#
# Детальні інструкції з написання setup.py ви можете отримати на сторінці документації.
#
# Приклад вмісту setup.py:
#
#
#
# from setuptools import setup
#
# setup(name='useful',
#       version='1',
#       description='Very useful code',
#       url='http://github.com/dummy_user/useful',
#       author='Flying Circus',
#       author_email='flyingcircus@example.com',
#       license='MIT',
#       packages=['useful'])
#
#
# В цьому прикладі ми викликаємо setup з додатковими інформаційними параметрами, які будуть доступні користувачам.
# А саме, ми вказали ім'я пакету, версію, короткий опис пакету, адресу, де можна подивитися початковий код, ім'я автора,
# його email, ліцензію, набір пакетів, які містяться у постачанні.
#
#
#
# Що, якщо наш пакет досить великий і прописувати вручну усі модулі packages незручно, та існує ризик помилитися? Тоді
# у setuptools є функція find_namespace_packages, яка допоможе знайти всі модулі і не пропустити нічого:
#
#
#
# from setuptools import setup, find_namespace_packages
#
# setup(
#     name='useful',
#     version='1',
#     description='Very useful code',
#     url='http://github.com/dummy_user/useful',
#     author='Flying Circus',
#     author_email='flyingcircus@example.com',
#     license='MIT',
#     packages=find_namespace_packages()
# )
#
#
# Такий пакет можна опублікувати на PyPi і тоді його можна буде встановити за допомогою pip, або опублікувати початковий
# код, і тоді можна буде встановити з початкових кодів.
#
#
#
# Щоб встановити цей пакет з початкового коду, виконайте в консолі pip install . або pip install -e . у папці, де лежить
# setup.py.