# Створення пакетів та модулів
# Короткі та прості скрипти поміщаються в одному не дуже великому файлі до 400 рядків. Такі скрипти не складно
# підтримувати і розвивати. Але рано чи пізно настає момент, коли коду стає надто багато. Розмір єдиного файлу робить
# навігацію файлом складною і пошук у файлі потрібного місця займає надто багато часу. У такій ситуації зручно буде
# розбити великий скрипт на складові частини і структурувати ваш код. Це зробить роботу з проектом простішою і зручнішою.
#

# Хороша структура проекту значно спрощує підтримку і розробку. Погана ж — навпаки істотно уповільнює роботу.
# І що більший проект, то це помітніше. Не лінуйтеся приділити час на продумування структури вашого проекту при кожній
# значній зміні. Ваші зусилля не пройдуть даремно і обов'язково окупляться в майбутньому.
#

# Створення пакетів та модулів
# Наприклад, усі функції, що мають загальне призначення, можна винести в окремий файл. "Точку входу" (скрипт, який
# викликається користувачем для початку роботи), допоміжні функції і налаштування в окремі файли, названі відповідно.
# В результаті ми отримаємо декілька відносно невеликих файлів, код в яких буде призначений для якогось одного завдання
# (налаштування застосунку, запуск застосунку, основна логіка). Такі файли з кодом у Python називаються модулями.
#

# Ви можете імпортувати код (функції, змінні, що завгодно) із модулей за допомогою оператора виразу from ... import ....

# Припустимо у вас є файл salary_calculations.py і його вміст виглядає так:
def add_bonus(salary, bonus_percents):
    return salary * (1 + bonus_percents / 100)
#
# У тій самій папці лежить основний скрипт cs_1.py, у якому ви б хотіли використати функцію add_bonus з
# salary_calculations.py. Щоб зробити це, нам достатньо імпортувати цю функцію:

from salary_calculations import add_bonus

salary = 1000
bonus = 15
salary_with_bonus = add_bonus(salary, bonus)
print(salary_with_bonus)    # 1150
#
# Ви також можете імпортувати увесь модуль за допомогою оператора import і тоді у вас буде доступ до усього вмісту модуля.
import salary_calculations

salary = 1000
bonus = 15
salary_with_bonus = salary_calculations.add_bonus(salary, bonus)
print(salary_with_bonus)    # 1150

# Щоб викликати функцію add_bonus з salary_calculations.py, коли ви імпортували увесь модуль, ви вказуєте ім'я
# модуля та ім'я функції через крапку.
#
# Окремі файли з розширенням .py — це модулі. Ви можете імпортувати з них потрібні вам сутності (об'єкти, константи тощо)
# і використати в інших модулях. Зверніть увагу, що під час імпорту не потрібно вказувати розширення файлу .py, тільки ім'я.
#
# Зі зростанням проекту кількість модулів (нагадаємо, що рекомендується не давати модулям занадто "розпухати") росте і
# вже пошук потрібного модуля починає викликати труднощі. У такій ситуації на допомогу приходять пакети Python.
#
# Пакет — це папка, що містить модулі Python. Розташовуючи модулі по папкам, ви можете структурувати модулі за
# призначенням, і пошук потрібного модуля стане набагато простішим.
#
# Робота з пакетами аналогічна роботі з модулями, ви можете імпортувати потрібну вам сутність (наприклад функцію),
# імпортувавши модуль з пакету. Припустимо, що модуль salary_calculations.py ви розмістили у папці calculations поряд
# з cs_1.py, де вам знадобилася функція add_bonus з salary_calculations.py. В такому випадку ви можете імпортувати
# модуль salary_calculations.py:

from calculations import salary_calculations

salary = 1000
bonus = 15
salary_with_bonus = salary_calculations.add_bonus(salary, bonus)
print(salary_with_bonus)    # 1150
#
# або тільки функцію:
from calculations.salary_calculations import add_bonus

salary = 1000
bonus = 15
salary_with_bonus = add_bonus(salary, bonus)
print(salary_with_bonus)    # 1150

# Розбиття на пакети і модулі може тривати стільки, скільки ви вважаєте за необхідне і зручне. Будь-який пакет може
# містити пакети в собі, а ті — ще пакети, і так далі.
#
# Основне правило — це називати пакети та модулі так само, як і змінні Python (тільки літери, цифри та _,
# ім'я не починається з цифри). Також дуже важливо продумати структуру проекту так, щоб вам було зручно потім шукати у
# ньому потрібні модулі.
