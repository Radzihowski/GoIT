# Робота з архівами
# Архіви по своїй суті — це ті самі файли, але інформація в них розташована з використанням алгоритмів стискання,
# які дозволяють записати інформацію в меншому об'ємі.

# Ви можете відкрити будь-який архів як файл в режимі роботи з байт-рядками, реалізувати алгоритм стискання і
# розпаковування на Python, і отримати власний архіватор/деархіватор. Ця досить цікава вправа і ви, звичайно,
# можете її виконати, якщо хочете глибше розібратися в алгоритмах стискання.
#
# Одна з головних причин популярності Python — в наявності великої кількості пакетів та модулів зі всіляким функціоналом,
# які можна використати для своїх потреб. Є простіший спосіб роботи з популярними безкоштовними архівами у Python — це
# пакет shutil, який представляє просунутіший файловий менеджер та вміє працювати з архівами.
#
# shutil підтримує архіви zip, tar, gz. Для цього він використовує пакети zipfile та tarfile. Ви можете використовувати
# їх напряму, якщо хочете.
#
# Щоб запакувати в архів поточну папку, достатньо викликати функцію make_archive пакету shutil:

import shutil

archive_name = shutil.make_archive('backup', 'zip')

# Якщо потрібно запакувати іншу папку, можна вказати шлях до папки третім аргументом:

import shutil

archive_name = shutil.make_archive('backup', 'zip', 'some_folder/inner')

# Обидва виклика створять файл backup.zip в поточній робочій папці, а в archive_name буде рядок з повним шляхом до архіву.
#
# Звичайно пакет shutil підтримує розпаковування архівів. Для цього є функція unpack_archive, яка розпакує архів у
# поточну папку або куди вкаже другий аргумент:

import shutil

archive_name = shutil.make_archive('backup', 'zip', 'some_folder/inner')
shutil.unpack_archive(archive_name, 'new_folder_for_data')

# В цьому прикладі спочатку папка 'some_folder/inner' була упакована у backup.zip, а потім backup.zip був розпакований
# у папку 'new_folder_for_data'.
#
# Щоб дізнатися, які формати підтримує пакет і які для них використовуються позначення, можна викликати функцію
# get_archive_formats.

import shutil

for shortcut, description in shutil.get_archive_formats():
    print('{:<10} | {:<10}'.format(shortcut, description))

# У виведенні ви отримаєте таблицю зі скороченням формату архіву та його коротким описом виду:

# """
# bztar      | bzip2'ed tar-file
# gztar      | gzip'ed tar-file
# tar        | uncompressed tar file
# xztar      | xz'ed tar-file
# zip        | ZIP file
# """
#
# Основна перевага використання shutil — це зручний інтерфейс, який візьме на себе рекурсивний прохід по усіх вкладених
# файлах і папках та збереже структуру файлів та папок, як при архівації, так і при розпаковуванні архіву.