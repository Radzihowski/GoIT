# Менеджер контексту
# Застосунок може виконати багато операцій між відкриттям та закриттям файлу. В будь-якому місці може статися помилка
# та застосунок завершиться аварійно, не повернувши файловий дескриптор системі. Така поведінка, як вже згадувалося,
# небажана і може призводити до втрати даних.
# Щоб уникнути цього, можна взяти блок коду, в якому відбувається робота з файлом, у блок try ... except:
fh = open('text.txt')
try:
    some_useful_function(fh)
finally:
    fh.close()

# У цьому прикладі ми викликали функцію some_useful_function всередині блоку try ... except і, якщо станеться виняток,
# то обов'язково виконається блок finally, в якому файл буде закритий. Цей підхід гарантує, що файловий дескриптор
# буде обов'язково повернений системі.
# Але такий підхід не надто елегантний та читабельний.
# Для покращення читабельності коду при збереженні функціоналу можна скористатися менеджером контексту open. Менеджер
# контексту — це синтаксична конструкція, яка покращує читабельність коду, але не вносить жодного додаткового функціонала.

with open('text.txt', 'w+') as fh:
    some_useful_function(fh)

# Менеджер контексту складається з ключового слова with, після якого викликається сам менеджер і, якщо щось потрібно
# повернути з менеджера, то це щось можна передати у змінну, оголошену після ключового слова as. Далі ставиться
# двокрапка і блок коду, який буде виконаний всередині менеджера. У прикладі з try ... finally — це код, який йде
# всередині блоку try. Коли код виконається, менеджер контексту виконає те, що повинен зробити в будь-якому випадку,
# закрити файл, наприклад (це те, що відбувається в блоку finally).
# Менеджер контексту open синтаксично повністю повторює свого класичного тезку open, вони повністю ідентичні з точки
# зору використання.
#
# З точки зору роботи, цей приклад робить у точності те саме, що і попередній з блоком try ... finally. Але замість
# п'яти рядків коду, ви можете написати два, і код виглядає читабельнішим.
#
# Такий спосіб роботи з файлами є рекомендованим у Python, оскільки гарантує, що програміст не забуде закрити файл
# у будь-якому разі.